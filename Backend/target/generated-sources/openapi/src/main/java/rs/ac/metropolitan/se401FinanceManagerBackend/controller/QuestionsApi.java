/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package rs.ac.metropolitan.se401FinanceManagerBackend.controller;

import rs.ac.metropolitan.se401FinanceManagerBackend.model.CreateQuestionRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.CreateQuestionResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.ErrorResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.GetQuestionByIdResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.GetQuestionsResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.QuestionRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UpdateQuestionRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UpdateQuestionResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Questions", description = "the Questions API")
public interface QuestionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Add new question", nickname = "createQuestion", notes = "Create a new question", response = CreateQuestionResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Question created successfully", response = CreateQuestionResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/questions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CreateQuestionResponse> _createQuestion(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateQuestionRequest createQuestionRequest) {
        return createQuestion(createQuestionRequest);
    }

    // Override this method
    default ResponseEntity<CreateQuestionResponse> createQuestion(CreateQuestionRequest createQuestionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete Question By ID", nickname = "deleteQuestion", notes = "Delete question by its Id value.", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Question with specified ID is deleted"),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/questions/{questionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> _deleteQuestion(@ApiParam(value = "Question Id",required=true) @PathVariable("questionId") Integer questionId) {
        return deleteQuestion(questionId);
    }

    // Override this method
    default ResponseEntity<Void> deleteQuestion(Integer questionId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get Question By ID", nickname = "getQuestionById", notes = "Get a single **Question** by its Id value.", response = GetQuestionByIdResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Found question with specified ID", response = GetQuestionByIdResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/questions/{questionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetQuestionByIdResponse> _getQuestionById(@ApiParam(value = "Question Id",required=true) @PathVariable("questionId") Integer questionId) {
        return getQuestionById(questionId);
    }

    // Override this method
    default ResponseEntity<GetQuestionByIdResponse> getQuestionById(Integer questionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "List of Questions", nickname = "getQuestions", notes = "Get a list of questions", response = GetQuestionsResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all questions", response = GetQuestionsResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/questions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetQuestionsResponse> _getQuestions() {
        return getQuestions();
    }

    // Override this method
    default ResponseEntity<GetQuestionsResponse> getQuestions() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"questionList\" : [ {    \"questionId\" : 1,    \"question\" : \"question\",    \"answer\" : \"answer\"  }, {    \"questionId\" : 1,    \"question\" : \"question\",    \"answer\" : \"answer\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update Question", nickname = "updateQuestion", notes = "Update question by id.", response = UpdateQuestionResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Questions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated question with specified id", response = UpdateQuestionResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/questions/{questionId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<UpdateQuestionResponse> _updateQuestion(@ApiParam(value = "Question Id",required=true) @PathVariable("questionId") Integer questionId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateQuestionRequest updateQuestionRequest) {
        return updateQuestion(questionId, updateQuestionRequest);
    }

    // Override this method
    default ResponseEntity<UpdateQuestionResponse> updateQuestion(Integer questionId,UpdateQuestionRequest updateQuestionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
