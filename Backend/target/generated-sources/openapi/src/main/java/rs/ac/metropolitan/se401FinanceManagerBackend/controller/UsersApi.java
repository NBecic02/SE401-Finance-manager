/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package rs.ac.metropolitan.se401FinanceManagerBackend.controller;

import rs.ac.metropolitan.se401FinanceManagerBackend.model.ChangePasswordRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.ErrorResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UserLoginRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UserLoginResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UserRegisterRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UserRegisterResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Users", description = "the Users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Change password", nickname = "changePassword", notes = "Change password", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Password is changed sucessfully"),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/users/changePassword",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> _changePassword(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ChangePasswordRequest changePasswordRequest) {
        return changePassword(changePasswordRequest);
    }

    // Override this method
    default ResponseEntity<Void> changePassword(ChangePasswordRequest changePasswordRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "User login", nickname = "loginUser", notes = "User login", response = UserLoginResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User logged in sucessfully", response = UserLoginResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/users/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserLoginResponse> _loginUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UserLoginRequest userLoginRequest) {
        return loginUser(userLoginRequest);
    }

    // Override this method
    default ResponseEntity<UserLoginResponse> loginUser(UserLoginRequest userLoginRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Register a new user", nickname = "registerUser", notes = "Register a new user", response = UserRegisterResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User registered sucessfully", response = UserRegisterResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/users/register",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserRegisterResponse> _registerUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UserRegisterRequest userRegisterRequest) {
        return registerUser(userRegisterRequest);
    }

    // Override this method
    default ResponseEntity<UserRegisterResponse> registerUser(UserRegisterRequest userRegisterRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
