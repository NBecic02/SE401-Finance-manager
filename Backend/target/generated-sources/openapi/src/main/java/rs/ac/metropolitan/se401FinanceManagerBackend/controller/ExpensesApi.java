/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package rs.ac.metropolitan.se401FinanceManagerBackend.controller;

import rs.ac.metropolitan.se401FinanceManagerBackend.model.CreateExpenseRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.CreateExpenseResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.ErrorResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.ExpenseRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.GetExpenseByIdResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.GetExpensesResponse;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UpdateExpenseRequest;
import rs.ac.metropolitan.se401FinanceManagerBackend.model.UpdateExpenseResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Expenses", description = "the Expenses API")
public interface ExpensesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Add new expense", nickname = "createExpense", notes = "Create a new expense", response = CreateExpenseResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Expenses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Expense created successfully", response = CreateExpenseResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/expenses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CreateExpenseResponse> _createExpense(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateExpenseRequest createExpenseRequest) {
        return createExpense(createExpenseRequest);
    }

    // Override this method
    default ResponseEntity<CreateExpenseResponse> createExpense(CreateExpenseRequest createExpenseRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete Expense By ID", nickname = "deleteExpense", notes = "Delete expense by its Id value.", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Expenses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Expense with specified ID is deleted"),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/expenses/{expenseId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> _deleteExpense(@ApiParam(value = "Expense Id",required=true) @PathVariable("expenseId") Integer expenseId) {
        return deleteExpense(expenseId);
    }

    // Override this method
    default ResponseEntity<Void> deleteExpense(Integer expenseId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get Expense By ID", nickname = "getExpenseById", notes = "Get a single **Expense** by its Id value.", response = GetExpenseByIdResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Expenses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Found expense with specified ID", response = GetExpenseByIdResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/expenses/{expenseId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetExpenseByIdResponse> _getExpenseById(@ApiParam(value = "Expense Id",required=true) @PathVariable("expenseId") Integer expenseId) {
        return getExpenseById(expenseId);
    }

    // Override this method
    default ResponseEntity<GetExpenseByIdResponse> getExpenseById(Integer expenseId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "List of Expenses", nickname = "getExpenses", notes = "Get a list of all expenses", response = GetExpensesResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Expenses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all expenses", response = GetExpensesResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/expenses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetExpensesResponse> _getExpenses(@ApiParam(value = "Page Number", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@ApiParam(value = "Page Size", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize,@ApiParam(value = "Sorting") @Valid @RequestParam(value = "sort", required = false) String sort) {
        return getExpenses(pageNumber, pageSize, sort);
    }

    // Override this method
    default ResponseEntity<GetExpensesResponse> getExpenses(Integer pageNumber,Integer pageSize,String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "List of Expenses for specified shop", nickname = "getExpensesByShop", notes = "Get a list of expenses for specified shop", response = GetExpensesResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Expenses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all expenses", response = GetExpensesResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/expenses/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetExpensesResponse> _getExpensesByShop(@NotNull @ApiParam(value = "Full name of the shop or first few charactes", required = true) @Valid @RequestParam(value = "shop", required = true) String shop,@ApiParam(value = "Page Number", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@ApiParam(value = "Page Size", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize,@ApiParam(value = "Sorting") @Valid @RequestParam(value = "sort", required = false) String sort) {
        return getExpensesByShop(shop, pageNumber, pageSize, sort);
    }

    // Override this method
    default ResponseEntity<GetExpensesResponse> getExpensesByShop(String shop,Integer pageNumber,Integer pageSize,String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update Expense", nickname = "updateExpense", notes = "Update expense by id.", response = UpdateExpenseResponse.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Expenses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated expense with specified id", response = UpdateExpenseResponse.class),
        @ApiResponse(code = 200, message = "Error response", response = ErrorResponse.class) })
    @RequestMapping(value = "/expenses/{expenseId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<UpdateExpenseResponse> _updateExpense(@ApiParam(value = "Expense Id",required=true) @PathVariable("expenseId") Integer expenseId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateExpenseRequest updateExpenseRequest) {
        return updateExpense(expenseId, updateExpenseRequest);
    }

    // Override this method
    default ResponseEntity<UpdateExpenseResponse> updateExpense(Integer expenseId,UpdateExpenseRequest updateExpenseRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
